/**
  ******************************************************************************
  * @file    main.c
  * @author  ShaneRSmith
  * @version V1.0
  * @date    01-May-2016
  * @brief   Main Function for ECE631 Final Project for Accel_Board
  ******************************************************************************
*/

// Include Required Header Files
#include <stdint.h>
#include <string.h>
#include "stm32f4xx.h"
#include "USART.h"
#include "jansson.h"
#include "json_coms.h"
#include <sys/time.h>
#include "circ_buff.h"
#include "state_machine.h"

// Global variables
static uint32_t ticks = 0;
static uint32_t lastTicks = 0;
static uint8_t button_flag = 0;
uint8_t str_start_flag=0;
char* msg;		// Message to Publish
char* topic;	// Topic to Publish

// UART6
#define MAX_STRLEN 2048
volatile int haveString;	// volatile tells the compiler this value can change very quickly

// Circular Buffers
commBuffer_t receive_buff;
commBuffer_t send_buff;

modes mode = STARTUP1;	// Initialize mode to STARTUP1 (enumeration defined in state_machine.h)

int main(void)
{
	haveString = 0;	// Initialize haveString to false
	InitUSART6();	// Initialize USART
	
	// Setup SysTick
	ticks = 0;
	lastTicks = 0;
	SystemCoreClockUpdate();

	InitBuffer(&receive_buff);	// Initialize receive buffer to '+'
	InitBuffer(&send_buff);		// Initialize send buffer to '+'
	// STM_EVAL_PBInit(BUTTON_USER, BUTTON_MODE_GPIO);	// Initialize Push Button

	// Configure so 1 tick = 1ms or 1000tick = 1 second
	if (SysTick_Config(SystemCoreClock / 1000))
		while (1);
	
	while(1)
	{
		mode = state_machine(mode, &receive_buff, &send_buff);	// Update mode
	}
}

void SysTick_Handler(void)
{
	ticks++;
}

void USART6_IRQHandler(void)
{
	if (USART_GetITStatus(USART6, USART_IT_RXNE)==SET)
	{
		// We have a character, let's take it and put it into our buffer for later processing.
		char ch = USART_ReceiveData(USART6);
		putChar(&receive_buff,ch);
	}
	if (USART_GetFlagStatus(USART6,USART_FLAG_TXE)==SET && haveStr(&send_buff))
	{	// Send characters from our send buffer.
		char ch = getChar(&send_buff);
		USART_SendData(USART6,ch);
	}
	else
	{	// We want to disable the transmit interupts until we have stuff to send.
		USART_ITConfig(USART6,USART_IT_TC,DISABLE);
	}
}

int _gettimeofday(struct timeval *tv, void *tzvp)
{
	uint64_t t = ticks*1000; // get uptime in nanoseconds
	tv->tv_sec = t/1000000000; // convert to seconds
	tv->tv_usec = (t%1000000000)/1000; // get remaining microseconds
	return 0; // return non-zero for error
}
